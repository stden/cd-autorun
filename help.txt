
  Описание "встроенных" функций, доступных из Lua-сценария
 ==========================================================

 Exit - Выход из программы (закрывает главную форму)

 GenDoc( SrcFileName, DocFile ) - Собирает текстовый файл из комментариев
                                      в файле с исходными текстами
  Пример: GenDoc("src\\MainUnit.pas","help.txt")
     SrcFileName (строка) - имя Pascal-файла
     DocFile (строка) - имя выходного файла для записи документации
       Комментарии для включения в выходной файл должны начинаться с //*
         Если перед строчкой с "//*" идёт пустая строка,
           то в выходной файл также добавляется пустая строка
         Вначале строки с комментариями могут быть пробелы - они будут перенесены в выходной файл.

 Message( Сообщение ) - выводит на экран окно с сообщением
   Сообщение - строка, например "Привет!"

 Button{ перечисление свойств через запятую } - создаёт кнопку
   Пример: Button{ image="img\\Выход.bmp", action=Exit, x=700, y=200 }
     x,y - координаты кнопки, x - Left, y - Top
     image - загрузка картинки для кнопки
     action - событие при нажатии на кнопку, может быть одного из 3-х типов:
      1) "встроенная" функция - из Delphi
      2) функция Lua - любая функция Lua без параметров и возвращаемых значений
      3) строка - строка рассматривается как ссылка и открывается программой
        назначенной в ОС для этого типа файлов
     При нажатии на кнопку курсор становится как "рука"
     Созданная кнопка помещается на форму
     Сама функция Button{} возвращает указатель на созданную кнопку

 Font{ свойства } - создание шрифта
     size - размер шрифта
     bold - true/false - жирный
     italic - true/false - наклонный
     strikeout - true/false - зачёркнутый
     underline - true/false - подчёркнутый
     color - (строка) цвет
     family - (строка) тип, например: "Times New Roman"
     Возвращает Font - щрифт для Delphi

 Page{ параметры } - страница с описанием программы
     PageImage - картинка для "Листика" (подложки)
     Размер подстраивается под размер картинки
     x - смещение листика (Left)
     y - смещение листика (Top)
     Картинка прозрачная по краям

   Hint - строка подсказки к Page
   icon - имя файла с "иконкой"
     Координаты иконки задаются явно
     IconLeft - смещение по x относительно угла "листика"
     IconTop - смещение по y относительно угла "листика"
     IconClick - событие - нажатие по иконке/странице

   LabeltoIconLayout - положением надписи относительно иконки
     bottom - описание размещается под иконкой (то, как это реализовано сейчас
     top - описание находится над иконкой (то, что нужно для этого дизайна)
     left - описание слева от иконки (пока не нужно, но может пригодиться в будущем)
     right - описание справа от иконки (пока не нужно, но может пригодиться в будущем)

   Header - заголовок (выше картинки)
   LabelBorderWidth - "каёмочка вокруг Label'ов"

       HeaderClick - событие при нажатии на нижнюю надпись

       HeaderFont - шрифт заголовка

   Bottom - подпись внизу страницы

       BottomClick - событие при нажатии на нижнюю надпись

 SetCaption( Заголовок )
     Меняет заголовок главного окна
     Ничего не возвращает

 Ask( Вопрос, Варианты_ответа } - окно подтверждения
   Пример: Message(Ask("Установить?","Да","Нет"))
     Вопрос - (строка) первый параметр функции
     Остальные параметры (строки) - варианты ответов
     Возвращает один результат - строку - ответ пользователя

 Menu( таблица меню } - создание главного меню программы
 На вход подаётся таблица:
   ключи - строки-названия пунктов меню
   значения - выполняемые действия
   Каждый нечётный элемент таблицы - имя пункта меню
   Дальше обязательно должна быть функция или подтаблица = подменю
   Функция оббегает всю переданную ей таблицу.
   Ничего не возвращает, заменяет главное меню

 LoadBackground( имя_файла_с_картинкой ) - заменяет фон
     Ничего не возвращает

 GetRunDir() - возвращает строку - путь запуска программы cd-autorun

 ShellFolder( имя_каталога ) - возвращает путь к специальной папке
  Возможные имена каталогов:
   "Desktop" - рабочий стол текущего пользователя
   "Personal" - "Мои документы" текущего пользователя
   "Start Menu" - "Главное меню"
   "Programs" - "Главное меню\Программы"
   "Startup" - "Главное меню\Программы\Автозагрузка"
   "Fonts" - Системные шрифты

 CreateIcon(    - создать ярлык
   “%ProgramFiles%\cd-autorun\autorun.exe” - Имя файла/каталога на который будет указывать ярлык
   LinkDir,     - Имя каталога, где создать ярлык
   LinkName,    - Имя ярлыка
   Arguments )  - Параметры запуска программы
 В путях можно применять переменные окружения:
   %ProgramFiles% -> C:\Program Files
   %AllUsersProfile% -> C:\Documents and Settings\All Users
   %APPDATA%
   %CommonProgramFiles%
   %HOMEDRIVE%
   %HOMEPATH%
   %ProgramFiles%
   %SystemDrive%
   %SystemRoot%
   %USERNAME%
   %USERPROFILE%
 Пример:
   CreateIcon( GetRunDir(), ShellFolder("Desktop"), "Каталог с Autorun", "" )
     создание ярлыка на рабочем столе текущего пользователя для каталога запуска Autorun

 Создание ярлыка на рабочем столе

 Создание иконки на рабочем столе

 ChangeWallpaper( имя_файла ) - смена обоев на рабочем столе

 DirExists( имя_каталога )
     Возвращает одно значение - есть ли каталог

 FontDialog( [шрифт_для_модификации] )
 Показывает диалог выбора шрифта
     Можно передать необязательный параметр - шрифт для модификации
     Создать его можно с помощью процедуры Font
     Если передан 1 параметр - шрифт, то он устанавливается начальным для диалога
     Возвращает выбранный в диалоге шрифт 

 Env( имя_переменной_окружения ) - получить значение переменной окружения

 RegKeyExists( имя_ключа ) - присутствует ли ключ в реестре

 RegValueExists( имя_ключа, имя_значения ) - присутствует ли значение в реестре

 RegGetValue( имя_ключа, имя_значения ) - получение значения из реестра
   Пример:
     Message("HKEY_CLASSES_ROOT\\.pdf - Content Type = "..RegGetValue("HKEY_CLASSES_ROOT\\.pdf","Content Type"))

 RegGetValue( имя_ключа, имя_значения, значение ) - получение значения из реестра

 ShowText( текст или объект ) - показывает текст в
   отдельном окне с возможностью копирования
   Функция нужна для автоматизации разработки Lua-скрипта

 NetUse( имя_диска, сетевой_путь ) - подключение сетевого диска
     Получает путь сейчас ассоциированный с данной буквой
     Если он не соответствует тому, что должно быть, то
       - отключаем текущий сетевой путь
       - подключаем новый сетевой путь

 CopyDir( fromDir, toDir ) - скопировать дерево каталогов
   fromDir - откуда копировать
   toDir - в какой каталог копировать
   Пример - программа копирует сама себя на жёсткий диск:
     CopyDir( GetRunDir(), “%ProgramFiles%\cd-autorun” )

 MoveDir( fromDir, toDir ) - перемещение каталога
   fromDir - откуда копировать
   toDir - в какой каталог копировать

 DelDir( DirName ) - удаление каталога (дерева каталогов)
   DirName - какой каталог удалять

 Exec( FileName [, Params] ) - запуск файла без ожидания завершения
   FileName - имя исполняемого файла
   Params (необязательный 2-ой параметр) - параметры вызова

 ExecWait( FileName [, Params] ) - запуск файла и ожидание его завершения
   FileName - имя исполняемого файла
   Params (необязательный 2-ой параметр) - параметры вызова

 ExecMSI( MSI_FileName ) - запуск MSI-файла (файла инсталлятора в формате Microsoft)
     Ожидается завершение файла

 DeleteFile( FileName ) - удалить файл
  Возвращает true - если файл удалён успешно и false в противном случае.

 GetDriveType( Путь ) - возвращает тип диска (строку)
 Возможные возвращаемые значения
   UNKNOWN - неизвестно
   NOT_EXIST - не существует
   REMOVABLE - дисковод, флешка
   FIXED - жёсткий диск
   NETWORK - сетевой диск
   CDROM - CD/DVD ROM
   RAMDISK - RAMDISK

 LoadIcon( файл_с_иконкой ) - загрузка иконки
   Используется: Application.Icon.LoadFromFile('icon.ico');

 LoadSkin( путь_к_каталогу, файл_с_темой_оформления ) - загрузка иконки

 InstallWizard( необходимые_для_установки_компоненты ) - вызов мастера установки
   Пример: InstallWizard(Flash, Java, PDF)


 InstallAllWizard() - вызов мастера установки Журнала в Журнале
   Пример: InstallAllWizard()
   При выводе окон мастера используются глобальные переменные


 Порядок выполнения конфигурационного файла написанного на Lua:
   1. Регистрация Lua-функций в хост-программе
   2. Выполнение скрипта "autorun.lua"
   3. Получение значений глобальных переменных (для "мастеров" установки)
   4. Реакция на события (запуск программ, выбор в меню и т.д.)

  Глобальные переменные autorun.lua
 ===================================
   WelcomeText="Вас приветствует ..."
   CheckSystemTitle="Проверка системы"
   CheckSystemText="Обнаружилось..."
   CheckSystemFinish="Система Готова"
   ChooseCatalogTitle=""
   ChooseCatalogText=""
   GoodByeText=""
   WizardLog - файл с картинкой в левом углу первого и последнего окна Wizard'а
